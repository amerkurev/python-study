<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Standard Library on Python Study</title><link>https://python.study/categories/standard-library/</link><description>Recent content in Standard Library on Python Study</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://python.study/categories/standard-library/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploring Python Collections with ABC and Goose Typing</title><link>https://python.study/p/exploring-python-collections-with-abc-goose-typing/</link><pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/exploring-python-collections-with-abc-goose-typing/</guid><description>&lt;img src="https://python.study/p/exploring-python-collections-with-abc-goose-typing/cover.jpeg" alt="Featured image of post Exploring Python Collections with ABC and Goose Typing" />Python&amp;rsquo;s Abstract Base Classes (ABCs) in the collections.abc module are a set of tools that help us check if a class follows a specific interface. This is done using the issubclass() or isinstance() functions. The interesting part is that the class we&amp;rsquo;re checking doesn&amp;rsquo;t need to inherit from the abstract base type. It just needs to provide the necessary methods to match the abstract type.
Here&amp;rsquo;s an example:
from collections.abc import Iterable class MyClass: def __iter__(self): .</description></item><item><title>Dataclasses in Python</title><link>https://python.study/p/dataclasses-in-python/</link><pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/dataclasses-in-python/</guid><description>&lt;img src="https://python.study/p/dataclasses-in-python/cover.jpeg" alt="Featured image of post Dataclasses in Python" />Dataclasses are simple classes that generally only have a set of fields, without additional functionality (methods). Dataclasses are similar to structures in the C language - a composite data type that encapsulates a set of values of different types without hiding them.
On the one hand, a data class can be represented in Python as an ordinary class. But this requires the programmer to perform routine actions: defining the __init__, __str__, comparison methods __eq__, etc.</description></item><item><title>Function Overloading in Python</title><link>https://python.study/p/function-overloading-in-python/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/function-overloading-in-python/</guid><description>&lt;img src="https://python.study/p/function-overloading-in-python/cover.jpeg" alt="Featured image of post Function Overloading in Python" />Function overloading is a mechanism in C++ that allows defining functions with the same name but different parameter sets. The compiler chooses the appropriate function based on the parameters. Each function can be adapted to work with specific parameter types.
Here&amp;rsquo;s an example of declaring overloaded functions in C++:
// Prototype three write functions. int write(std::string s); // Write a string. int write(double d); // Write a double. int write(double d, int p); // Write a double with a given precision.</description></item></channel></rss>