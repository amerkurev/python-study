<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Packages on Python Study</title><link>https://python.study/categories/packages/</link><description>Recent content in Packages on Python Study</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 28 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://python.study/categories/packages/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a Powerful Interactive CLI App with ChatGPT in Python</title><link>https://python.study/p/creating-interactive-cli-app-with-chatgpt-in-python/</link><pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/creating-interactive-cli-app-with-chatgpt-in-python/</guid><description>&lt;img src="https://python.study/p/creating-interactive-cli-app-with-chatgpt-in-python/cover.jpeg" alt="Featured image of post Creating a Powerful Interactive CLI App with ChatGPT in Python" />As developers, we spend a significant amount of time in our terminal. It&amp;rsquo;s only logical to bring the interaction with ChatGPT into our terminal. Plus, it&amp;rsquo;s a great opportunity to learn how to create powerful interactive CLI applications in Python. Forget about the standard input(), we are going to make it much cooler!
To get started, we need to interact with ChatGPT via API, so we need an API Key (OPENAI_API_KEY).</description></item><item><title>Don't forget about __slots__ in Python!</title><link>https://python.study/p/dont-forget-about-slots-in-python/</link><pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/dont-forget-about-slots-in-python/</guid><description>&lt;img src="https://python.study/p/dont-forget-about-slots-in-python/cover.jpeg" alt="Featured image of post Don't forget about __slots__ in Python!" />Python&amp;rsquo;s __slots__ is a simple yet powerful feature that is often overlooked and misunderstood by many. By default, Python stores instance attributes in a dictionary called __dict__ that belongs to the instance itself. This common approach is associated with significant overhead. However, this behavior can be altered by defining a class attribute called __slots__.
When __slots__ is defined, Python uses an alternative storage model for instance attributes: the attributes are stored in a hidden array of references, which consumes significantly less memory than a dictionary.</description></item><item><title>Exploring Python Collections with ABC and Goose Typing</title><link>https://python.study/p/exploring-python-collections-with-abc-goose-typing/</link><pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/exploring-python-collections-with-abc-goose-typing/</guid><description>&lt;img src="https://python.study/p/exploring-python-collections-with-abc-goose-typing/cover.jpeg" alt="Featured image of post Exploring Python Collections with ABC and Goose Typing" />Python&amp;rsquo;s Abstract Base Classes (ABCs) in the collections.abc module are a set of tools that help us check if a class follows a specific interface. This is done using the issubclass() or isinstance() functions. The interesting part is that the class we&amp;rsquo;re checking doesn&amp;rsquo;t need to inherit from the abstract base type. It just needs to provide the necessary methods to match the abstract type.
Here&amp;rsquo;s an example:
from collections.abc import Iterable class MyClass: def __iter__(self): .</description></item><item><title>Download large file in Python with beautiful progress bar</title><link>https://python.study/p/download-large-file-in-python-with-progress-bar/</link><pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/download-large-file-in-python-with-progress-bar/</guid><description>&lt;img src="https://python.study/p/download-large-file-in-python-with-progress-bar/cover.jpeg" alt="Featured image of post Download large file in Python with beautiful progress bar" />To begin, let&amp;rsquo;s look at an example of downloading a large file using the requests package. The requests package is one of the most popular packages in Python, with millions of downloads every day. You can verify this on the website that publishes statistics on the most downloaded PyPI packages.
To run the example, you need to install the requests package. Here is the code:
import requests def download(url: str, filename: str): with open(filename, &amp;#39;wb&amp;#39;) as f: with requests.</description></item><item><title>Dataclasses in Python</title><link>https://python.study/p/dataclasses-in-python/</link><pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/dataclasses-in-python/</guid><description>&lt;img src="https://python.study/p/dataclasses-in-python/cover.jpeg" alt="Featured image of post Dataclasses in Python" />Dataclasses are simple classes that generally only have a set of fields, without additional functionality (methods). Dataclasses are similar to structures in the C language - a composite data type that encapsulates a set of values of different types without hiding them.
On the one hand, a data class can be represented in Python as an ordinary class. But this requires the programmer to perform routine actions: defining the __init__, __str__, comparison methods __eq__, etc.</description></item></channel></rss>