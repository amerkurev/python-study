<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pympler on Python Study</title><link>https://python.study/tags/pympler/</link><description>Recent content in pympler on Python Study</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 31 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://python.study/tags/pympler/index.xml" rel="self" type="application/rss+xml"/><item><title>Don't forget about __slots__ in Python!</title><link>https://python.study/p/dont-forget-about-slots-in-python/</link><pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/dont-forget-about-slots-in-python/</guid><description>&lt;img src="https://python.study/p/dont-forget-about-slots-in-python/cover.jpeg" alt="Featured image of post Don't forget about __slots__ in Python!" />Python&amp;rsquo;s __slots__ is a simple yet powerful feature that is often overlooked and misunderstood by many. By default, Python stores instance attributes in a dictionary called __dict__ that belongs to the instance itself. This common approach is associated with significant overhead. However, this behavior can be altered by defining a class attribute called __slots__.
When __slots__ is defined, Python uses an alternative storage model for instance attributes: the attributes are stored in a hidden array of references, which consumes significantly less memory than a dictionary.</description></item></channel></rss>