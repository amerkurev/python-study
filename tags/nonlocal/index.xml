<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nonlocal on Python Study</title><link>https://python.study/tags/nonlocal/</link><description>Recent content in nonlocal on Python Study</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 21 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://python.study/tags/nonlocal/index.xml" rel="self" type="application/rss+xml"/><item><title>Python Variable Scopes: Understanding Local, Global, and Nonlocal</title><link>https://python.study/p/variable-scopes-local-global-nonlocal/</link><pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/variable-scopes-local-global-nonlocal/</guid><description>&lt;img src="https://python.study/p/variable-scopes-local-global-nonlocal/cover.jpeg" alt="Featured image of post Python Variable Scopes: Understanding Local, Global, and Nonlocal" />In Python, there are three variable scopes: global, local, and nonlocal.
Local scope Local scope refers to variables inside a function that can only be accessed within that function. Control blocks like if, while, and for do not create a new local scope. Variables inside them belong to the enclosing function.
def local_scope(): if True: x = &amp;#39;x&amp;#39; print(f&amp;#39;{x} is local&amp;#39;) # outputs `x is local` print(f&amp;#39;{x} is local&amp;#39;) # raises NameError: name &amp;#39;x&amp;#39; is not defined Global scope Global scope refers to variables declared outside functions that can be accessed throughout the program.</description></item></channel></rss>