<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rich on Python Study</title><link>https://python.study/tags/rich/</link><description>Recent content in rich on Python Study</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://python.study/tags/rich/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploring Python Collections with ABC and Goose Typing</title><link>https://python.study/p/exploring-python-collections-with-abc-goose-typing/</link><pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/exploring-python-collections-with-abc-goose-typing/</guid><description>&lt;img src="https://python.study/p/exploring-python-collections-with-abc-goose-typing/cover.jpeg" alt="Featured image of post Exploring Python Collections with ABC and Goose Typing" />Python&amp;rsquo;s Abstract Base Classes (ABCs) in the collections.abc module are a set of tools that help us check if a class follows a specific interface. This is done using the issubclass() or isinstance() functions. The interesting part is that the class we&amp;rsquo;re checking doesn&amp;rsquo;t need to inherit from the abstract base type. It just needs to provide the necessary methods to match the abstract type.
Here&amp;rsquo;s an example:
from collections.abc import Iterable class MyClass: def __iter__(self): .</description></item></channel></rss>