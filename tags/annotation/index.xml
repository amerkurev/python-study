<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>annotation on Python Study</title><link>https://python.study/tags/annotation/</link><description>Recent content in annotation on Python Study</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 29 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://python.study/tags/annotation/index.xml" rel="self" type="application/rss+xml"/><item><title>Union Type Expression</title><link>https://python.study/p/union-type-expr-in-python/</link><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><guid>https://python.study/p/union-type-expr-in-python/</guid><description>&lt;img src="https://python.study/p/union-type-expr-in-python/cover.jpeg" alt="Featured image of post Union Type Expression" />Starting from Python 3.10, you can use Union type expression in some scenarios.
The built-in functions isinstance() and issubclass() take a type or tuple of types as their second argument. Using tuples requires writing additional parentheses.
Consider the code below:
x = 42 print(isinstance(x, (int, str))) # output: True print(issubclass(type(x), (int, str))) # output: True Let&amp;rsquo;s rewrite this example using Union type expression:
x = 42 print(isinstance(x, int | str)) # output: True print(issubclass(type(x), int | str)) # output: True This example is equivalent to the previous one, but it looks cleaner.</description></item></channel></rss>